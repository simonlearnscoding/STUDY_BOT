
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.7.1
 * Query Engine version: 272861e07ab64f234d3ffc4094e32bd61775599c
 */
Prisma.prismaVersion = {
  client: "4.7.1",
  engine: "272861e07ab64f234d3ffc4094e32bd61775599c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ActivityRewardsScalarFieldEnum = makeEnum({
  activityID: 'activityID',
  id: 'id',
  rewardMinute: 'rewardMinute',
  rewardMinuteCam: 'rewardMinuteCam',
  rewardMinuteLog: 'rewardMinuteLog',
  RewardStreak: 'RewardStreak',
  RewardRestart: 'RewardRestart',
  rewardMin: 'rewardMin',
  rewardMax: 'rewardMax',
  reward: 'reward'
});

exports.Prisma.ActivityScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.GuildPreferencesScalarFieldEnum = makeEnum({
  id: 'id',
  guildID: 'guildID'
});

exports.Prisma.GuildScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  preferenceID: 'preferenceID'
});

exports.Prisma.HistoricLogsScalarFieldEnum = makeEnum({
  id: 'id',
  date: 'date',
  type: 'type',
  timeframe: 'timeframe',
  userId: 'userId',
  activityId: 'activityId',
  guildId: 'guildId'
});

exports.Prisma.HistoricQuickLogsScalarFieldEnum = makeEnum({
  id: 'id',
  date: 'date',
  type: 'type',
  start: 'start',
  end: 'end',
  userId: 'userId',
  activityId: 'activityId',
  guildId: 'guildId'
});

exports.Prisma.LevelRoleScalarFieldEnum = makeEnum({
  name: 'name',
  minlevel: 'minlevel'
});

exports.Prisma.LogsNowScalarFieldEnum = makeEnum({
  id: 'id',
  timestamp: 'timestamp',
  type: 'type',
  userId: 'userId',
  activityId: 'activityId',
  guildId: 'guildId'
});

exports.Prisma.LogsTodayScalarFieldEnum = makeEnum({
  id: 'id',
  date: 'date',
  Type: 'Type',
  Timeframe: 'Timeframe',
  minutes: 'minutes',
  userId: 'userId',
  activityId: 'activityId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserActivityLogsTodayScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  userId: 'userId',
  guildId: 'guildId',
  activityId: 'activityId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  nick: 'nick',
  timezone: 'timezone',
  role: 'role',
  levelRole: 'levelRole'
});
exports.ActivityType = makeEnum({
  CAM: 'CAM',
  LOG: 'LOG',
  VC: 'VC'
});

exports.Timeframe = makeEnum({
  DAY: 'DAY',
  WEEK: 'WEEK',
  MONTH: 'MONTH'
});

exports.levelRole = makeEnum({
  GLADIATOR: 'GLADIATOR',
  FREEDMAN: 'FREEDMAN',
  PLEBEIAN: 'PLEBEIAN',
  PATRICIAN: 'PATRICIAN',
  SENATOR: 'SENATOR',
  CONSUL: 'CONSUL',
  EMPEROR: 'EMPEROR'
});

exports.role = makeEnum({
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  USER: 'USER'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Guild: 'Guild',
  GuildPreferences: 'GuildPreferences',
  Activity: 'Activity',
  ActivityRewards: 'ActivityRewards',
  logsNow: 'logsNow',
  historicLogs: 'historicLogs',
  historicQuickLogs: 'historicQuickLogs',
  logsToday: 'logsToday',
  UserActivityLogsToday: 'UserActivityLogsToday',
  LevelRole: 'LevelRole'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
