// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// THIS IS WHERE WE CAN SET UP THE ARCHITECTURE OF OUR DB
// https://prisma-client-py.readthedocs.io/en/stable/getting_started/quickstart/
generator db {
  interface            = "asyncio"
  recursive_type_depth = 5
  provider             = "prisma-client-py"
}

datasource db {
  provider = "mysql"
  url      = "mysql://simon:spqr-server@192.53.122.228/discordjs"
}

enum SessionStatus {
  ONGOING
  COMPLETED
}

enum Pillar {
  THINKER
  DISCIPLINE
  PHYSICAL_WORK
}

model User {
  id           BigInt        @id @default(autoincrement())
  name         String
  sessions     Session[]
  activityLogs ActivityLog[]
  userLevels   UserLevel[]
}

model ActivityType {
  id           BigInt        @id @default(autoincrement())
  name         String
  pillar       Pillar
  activityLogs ActivityLog[]
}

model VCType {
  id           BigInt        @id @default(autoincrement())
  name         String
  activityLogs ActivityLog[]
}

model Session {
  id           BigInt        @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  joinedAt     DateTime      @default(now())
  activity     String
  leftAt       DateTime?
  activityLogs ActivityLog[]
  nick          String?
  userId       BigInt
  status       SessionStatus @default(ONGOING)
  duration     Int    @default(0)
}

model ActivityLog {
  id             BigInt        @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  nick          String?
  session        Session       @relation(fields: [sessionId], references: [id])
  activity       String
  activityType   String
  joinedAt       DateTime      @default(now())
  leftAt         DateTime?
  duration       Int?           @default(0)
  xp             Int?
  status         SessionStatus @default(ONGOING)
  userId         BigInt
  sessionId      BigInt
  ActivityType   ActivityType? @relation(fields: [activityTypeId], references: [id])
  activityTypeId BigInt?
  VCType         VCType?       @relation(fields: [vCTypeId], references: [id])
  vCTypeId       BigInt?
}

model UserLevel {
  id     BigInt @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  pillar Pillar
  level  Int    @default(1)
  xp     Int    @default(0)
  userId BigInt
}

model Role {
  id       BigInt @id @default(autoincrement())
  name     String
  minLevel Int
  pillar   Pillar
}

enum RoleName {
  INERTUS // Consistent with nothing
  GLADIATOR // Consistent with PHYSICAL_WORK
  LEGIONARY // Consistent with DISCIPLINE
  PHILOSOPHER // Consistent with THINKER
  SENATOR // Consistent with DISCIPLINE and THINKER
  CENTURION // Consistent with DISCIPLINE and PHYSICAL_WORK
  ATHENAEUM // Consistent with PHYSICAL_WORK and THINKER
  IMPERATOR // Consistent with everything
}
