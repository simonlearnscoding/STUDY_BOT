# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel, BaseConfig

from . import fields, actions
from ._types import FuncType
from .builder import serialize_base64


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _Config(BaseConfig):
    use_enum_values: bool = True
    arbitrary_types_allowed: bool = True
    allow_population_by_field_name: bool = True
    json_encoders: Dict[Any, FuncType] = {
        fields.Base64: serialize_base64,
    }


class _PrismaModel(BaseModel):
    Config = _Config

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](get_client(), cls)


class BaseActivityType(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ActivityType']] = 'ActivityType'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.ActivityTypeActions[_PrismaModelT]':
        from .client import get_client

        return actions.ActivityTypeActions[_PrismaModelT](get_client(), cls)


class BaseSwitches(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Switches']] = 'Switches'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.SwitchesActions[_PrismaModelT]':
        from .client import get_client

        return actions.SwitchesActions[_PrismaModelT](get_client(), cls)


class BaseVCType(_PrismaModel):
    __prisma_model__: ClassVar[Literal['VCType']] = 'VCType'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.VCTypeActions[_PrismaModelT]':
        from .client import get_client

        return actions.VCTypeActions[_PrismaModelT](get_client(), cls)


class BaseSession(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Session']] = 'Session'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.SessionActions[_PrismaModelT]':
        from .client import get_client

        return actions.SessionActions[_PrismaModelT](get_client(), cls)


class BaseActivityLog(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ActivityLog']] = 'ActivityLog'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.ActivityLogActions[_PrismaModelT]':
        from .client import get_client

        return actions.ActivityLogActions[_PrismaModelT](get_client(), cls)


class BaseUserLevel(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserLevel']] = 'UserLevel'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.UserLevelActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserLevelActions[_PrismaModelT](get_client(), cls)


class BaseRole(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Role']] = 'Role'

    @classmethod
    def prisma(cls: Type[_PrismaModelT]) -> 'actions.RoleActions[_PrismaModelT]':
        from .client import get_client

        return actions.RoleActions[_PrismaModelT](get_client(), cls)


