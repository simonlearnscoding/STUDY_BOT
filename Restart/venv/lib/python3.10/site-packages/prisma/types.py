# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _SessionStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.SessionStatus']]


class _SessionStatusListFilterHasInput(TypedDict):
    has: 'enums.SessionStatus'


class _SessionStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.SessionStatus']


class _SessionStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.SessionStatus']


class _SessionStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


SessionStatusListFilter = Union[
    _SessionStatusListFilterHasInput,
    _SessionStatusListFilterEqualsInput,
    _SessionStatusListFilterHasSomeInput,
    _SessionStatusListFilterIsEmptyInput,
    _SessionStatusListFilterHasEveryInput,
]


class _SessionStatusListUpdateSet(TypedDict):
    set: List['enums.SessionStatus']


class _SessionStatusListUpdatePush(TypedDict):
    push: List['enums.SessionStatus']


SessionStatusListUpdate = Union[
    List['enums.SessionStatus'],
    _SessionStatusListUpdateSet,
    _SessionStatusListUpdatePush,
]

class _PillarListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Pillar']]


class _PillarListFilterHasInput(TypedDict):
    has: 'enums.Pillar'


class _PillarListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Pillar']


class _PillarListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Pillar']


class _PillarListFilterIsEmptyInput(TypedDict):
    is_empty: bool


PillarListFilter = Union[
    _PillarListFilterHasInput,
    _PillarListFilterEqualsInput,
    _PillarListFilterHasSomeInput,
    _PillarListFilterIsEmptyInput,
    _PillarListFilterHasEveryInput,
]


class _PillarListUpdateSet(TypedDict):
    set: List['enums.Pillar']


class _PillarListUpdatePush(TypedDict):
    push: List['enums.Pillar']


PillarListUpdate = Union[
    List['enums.Pillar'],
    _PillarListUpdateSet,
    _PillarListUpdatePush,
]

class _RoleNameListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.RoleName']]


class _RoleNameListFilterHasInput(TypedDict):
    has: 'enums.RoleName'


class _RoleNameListFilterHasEveryInput(TypedDict):
    has_every: List['enums.RoleName']


class _RoleNameListFilterHasSomeInput(TypedDict):
    has_some: List['enums.RoleName']


class _RoleNameListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleNameListFilter = Union[
    _RoleNameListFilterHasInput,
    _RoleNameListFilterEqualsInput,
    _RoleNameListFilterHasSomeInput,
    _RoleNameListFilterIsEmptyInput,
    _RoleNameListFilterHasEveryInput,
]


class _RoleNameListUpdateSet(TypedDict):
    set: List['enums.RoleName']


class _RoleNameListUpdatePush(TypedDict):
    push: List['enums.RoleName']


RoleNameListUpdate = Union[
    List['enums.RoleName'],
    _RoleNameListUpdateSet,
    _RoleNameListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    activityLogs: 'ActivityLogCreateManyNestedWithoutRelationsInput'
    userLevels: 'UserLevelCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    name: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

UserWhereUniqueInput = _UserWhereUnique_id_Input


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicBigIntInput, _int]
    name: _str
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    activityLogs: 'ActivityLogUpdateManyWithoutRelationsInput'
    userLevels: 'UserLevelUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicBigIntInput, _int]
    name: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUser']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive1']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive2']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive3']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive4']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ActivityTypeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive1']


class ActivityTypeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive2']


class ActivityTypeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive3']


class ActivityTypeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive4']


class ActivityTypeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ActivityTypeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class ActivityTypeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class ActivityTypeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class ActivityTypeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class ActivityTypeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyActivityTypeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class FindManyActivityTypeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class FindManyActivityTypeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class FindManyActivityTypeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class FindManyActivityTypeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    
    

class VCTypeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive1']


class VCTypeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive2']


class VCTypeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive3']


class VCTypeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive4']


class VCTypeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VCTypeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class VCTypeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class VCTypeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class VCTypeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class VCTypeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVCTypeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class FindManyVCTypeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class FindManyVCTypeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class FindManyVCTypeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class FindManyVCTypeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class ActivityLogIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    session: Union[bool, 'SessionArgsFromUserRecursive1']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserRecursive1']
    VCType: Union[bool, 'VCTypeArgsFromUserRecursive1']


class ActivityLogIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    session: Union[bool, 'SessionArgsFromUserRecursive2']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserRecursive2']
    VCType: Union[bool, 'VCTypeArgsFromUserRecursive2']


class ActivityLogIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    session: Union[bool, 'SessionArgsFromUserRecursive3']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserRecursive3']
    VCType: Union[bool, 'VCTypeArgsFromUserRecursive3']


class ActivityLogIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    session: Union[bool, 'SessionArgsFromUserRecursive4']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserRecursive4']
    VCType: Union[bool, 'VCTypeArgsFromUserRecursive4']


class ActivityLogIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ActivityLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class ActivityLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class ActivityLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class ActivityLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class ActivityLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyActivityLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class FindManyActivityLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class FindManyActivityLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class FindManyActivityLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class FindManyActivityLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    
    

class UserLevelIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class UserLevelIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class UserLevelIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class UserLevelIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class UserLevelIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserLevelArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class UserLevelArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class UserLevelArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class UserLevelArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class UserLevelArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserLevelArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class FindManyUserLevelArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class FindManyUserLevelArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class FindManyUserLevelArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class FindManyUserLevelArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    
    

class RoleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class RoleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class RoleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class RoleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class RoleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    sessions: 'SessionListRelationFilter'
    activityLogs: 'ActivityLogListRelationFilter'
    userLevels: 'UserLevelListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    sessions: 'SessionListRelationFilter'
    activityLogs: 'ActivityLogListRelationFilter'
    userLevels: 'UserLevelListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    sessions: 'SessionListRelationFilter'
    activityLogs: 'ActivityLogListRelationFilter'
    userLevels: 'UserLevelListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    sessions: 'SessionListRelationFilter'
    activityLogs: 'ActivityLogListRelationFilter'
    userLevels: 'UserLevelListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    sessions: 'SessionListRelationFilter'
    activityLogs: 'ActivityLogListRelationFilter'
    userLevels: 'UserLevelListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    name: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'sessions',
    'activityLogs',
    'userLevels',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'sessions',
        'activityLogs',
        'userLevels',
    ]

# ActivityType types

class ActivityTypeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ActivityType create method"""
    id: _int
    activityLogs: 'ActivityLogCreateManyNestedWithoutRelationsInput'


class ActivityTypeCreateInput(ActivityTypeOptionalCreateInput):
    """Required arguments to the ActivityType create method"""
    name: _str
    pillar: 'enums.Pillar'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ActivityTypeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ActivityType create method, without relations"""
    id: _int


class ActivityTypeCreateWithoutRelationsInput(ActivityTypeOptionalCreateWithoutRelationsInput):
    """Required arguments to the ActivityType create method, without relations"""
    name: _str
    pillar: 'enums.Pillar'


class ActivityTypeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ActivityTypeCreateWithoutRelationsInput'
    connect: 'ActivityTypeWhereUniqueInput'


class ActivityTypeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ActivityTypeCreateWithoutRelationsInput', List['ActivityTypeCreateWithoutRelationsInput']]
    connect: Union['ActivityTypeWhereUniqueInput', List['ActivityTypeWhereUniqueInput']]


_ActivityTypeWhereUnique_id_Input = TypedDict(
    '_ActivityTypeWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ActivityTypeWhereUniqueInput = _ActivityTypeWhereUnique_id_Input


class ActivityTypeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicBigIntInput, _int]
    name: _str
    pillar: 'enums.Pillar'
    activityLogs: 'ActivityLogUpdateManyWithoutRelationsInput'


class ActivityTypeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicBigIntInput, _int]
    name: _str
    pillar: 'enums.Pillar'


class ActivityTypeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ActivityTypeCreateWithoutRelationsInput']
    connect: List['ActivityTypeWhereUniqueInput']
    set: List['ActivityTypeWhereUniqueInput']
    disconnect: List['ActivityTypeWhereUniqueInput']
    delete: List['ActivityTypeWhereUniqueInput']

    # TODO
    # update: List['ActivityTypeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ActivityTypeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ActivityTypeScalarWhereInput']
    # upsert: List['ActivityTypeUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ActivityTypeCreateOrConnectWithoutRelationsInput']


class ActivityTypeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ActivityTypeCreateWithoutRelationsInput'
    connect: 'ActivityTypeWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ActivityTypeUpdateInput'
    # upsert: 'ActivityTypeUpsertWithoutRelationsInput'
    # connectOrCreate: 'ActivityTypeCreateOrConnectWithoutRelationsInput'


class ActivityTypeUpsertInput(TypedDict):
    create: 'ActivityTypeCreateInput'
    update: 'ActivityTypeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ActivityType_id_OrderByInput = TypedDict(
    '_ActivityType_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ActivityType_name_OrderByInput = TypedDict(
    '_ActivityType_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_ActivityType_pillar_OrderByInput = TypedDict(
    '_ActivityType_pillar_OrderByInput',
    {
        'pillar': 'SortOrder',
    },
    total=True
)

ActivityTypeOrderByInput = Union[
    '_ActivityType_id_OrderByInput',
    '_ActivityType_name_OrderByInput',
    '_ActivityType_pillar_OrderByInput',
]



# recursive ActivityType types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ActivityTypeRelationFilter = TypedDict(
    'ActivityTypeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ActivityTypeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ActivityTypeInclude(TypedDict, total=False):
    """ActivityType relational arguments"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityType']


    

class UserIncludeFromActivityType(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityTypeRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive1']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityTypeRecursive1']


class UserIncludeFromActivityTypeRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityTypeRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive2']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityTypeRecursive2']


class UserIncludeFromActivityTypeRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityTypeRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive3']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityTypeRecursive3']


class UserIncludeFromActivityTypeRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityTypeRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive4']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityTypeRecursive4']


class UserIncludeFromActivityTypeRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityType"""

    

class UserArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    
    

class FindManyUserArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ActivityTypeIncludeFromActivityType(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive1']


class ActivityTypeIncludeFromActivityTypeRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive2']


class ActivityTypeIncludeFromActivityTypeRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive3']


class ActivityTypeIncludeFromActivityTypeRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive4']


class ActivityTypeIncludeFromActivityTypeRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityType"""

    

class ActivityTypeArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class ActivityTypeArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class ActivityTypeArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class ActivityTypeArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class ActivityTypeArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    
    

class FindManyActivityTypeArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class FindManyActivityTypeArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class FindManyActivityTypeArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class FindManyActivityTypeArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class FindManyActivityTypeArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    
    

class VCTypeIncludeFromActivityType(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive1']


class VCTypeIncludeFromActivityTypeRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive2']


class VCTypeIncludeFromActivityTypeRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive3']


class VCTypeIncludeFromActivityTypeRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive4']


class VCTypeIncludeFromActivityTypeRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityType"""

    

class VCTypeArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class VCTypeArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class VCTypeArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class VCTypeArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class VCTypeArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    
    

class FindManyVCTypeArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class FindManyVCTypeArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class FindManyVCTypeArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class FindManyVCTypeArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class FindManyVCTypeArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    
    

class SessionIncludeFromActivityType(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive1']


class SessionIncludeFromActivityTypeRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive2']


class SessionIncludeFromActivityTypeRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive3']


class SessionIncludeFromActivityTypeRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityTypeRecursive4']


class SessionIncludeFromActivityTypeRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityType"""

    

class SessionArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    
    

class FindManySessionArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class ActivityLogIncludeFromActivityType(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive1']
    session: Union[bool, 'SessionArgsFromActivityTypeRecursive1']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityTypeRecursive1']
    VCType: Union[bool, 'VCTypeArgsFromActivityTypeRecursive1']


class ActivityLogIncludeFromActivityTypeRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive2']
    session: Union[bool, 'SessionArgsFromActivityTypeRecursive2']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityTypeRecursive2']
    VCType: Union[bool, 'VCTypeArgsFromActivityTypeRecursive2']


class ActivityLogIncludeFromActivityTypeRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive3']
    session: Union[bool, 'SessionArgsFromActivityTypeRecursive3']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityTypeRecursive3']
    VCType: Union[bool, 'VCTypeArgsFromActivityTypeRecursive3']


class ActivityLogIncludeFromActivityTypeRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive4']
    session: Union[bool, 'SessionArgsFromActivityTypeRecursive4']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityTypeRecursive4']
    VCType: Union[bool, 'VCTypeArgsFromActivityTypeRecursive4']


class ActivityLogIncludeFromActivityTypeRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityType"""

    

class ActivityLogArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class ActivityLogArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class ActivityLogArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class ActivityLogArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class ActivityLogArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    
    

class FindManyActivityLogArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class FindManyActivityLogArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class FindManyActivityLogArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class FindManyActivityLogArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class FindManyActivityLogArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    
    

class UserLevelIncludeFromActivityType(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive1']


class UserLevelIncludeFromActivityTypeRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive2']


class UserLevelIncludeFromActivityTypeRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive3']


class UserLevelIncludeFromActivityTypeRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityType"""
    user: Union[bool, 'UserArgsFromActivityTypeRecursive4']


class UserLevelIncludeFromActivityTypeRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityType"""

    

class UserLevelArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class UserLevelArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class UserLevelArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class UserLevelArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class UserLevelArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    
    

class FindManyUserLevelArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class FindManyUserLevelArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class FindManyUserLevelArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class FindManyUserLevelArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class FindManyUserLevelArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    
    

class RoleIncludeFromActivityType(TypedDict, total=False):
    """Relational arguments for ActivityType"""


class RoleIncludeFromActivityTypeRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityType"""


class RoleIncludeFromActivityTypeRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityType"""


class RoleIncludeFromActivityTypeRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityType"""


class RoleIncludeFromActivityTypeRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityType"""

    

class RoleArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    
    

class FindManyRoleArgsFromActivityType(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromActivityTypeRecursive1(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromActivityTypeRecursive2(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromActivityTypeRecursive3(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromActivityTypeRecursive4(TypedDict, total=False):
    """Arguments for ActivityType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    


FindManyActivityTypeArgs = FindManyActivityTypeArgsFromActivityType
FindFirstActivityTypeArgs = FindManyActivityTypeArgsFromActivityType


    

class ActivityTypeWhereInput(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    pillar: 'enums.Pillar'
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivityTypeWhereInputRecursive1', List['ActivityTypeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ActivityTypeWhereInputRecursive1']
    OR: List['ActivityTypeWhereInputRecursive1']
    NOT: List['ActivityTypeWhereInputRecursive1']


class ActivityTypeWhereInputRecursive1(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    pillar: 'enums.Pillar'
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivityTypeWhereInputRecursive2', List['ActivityTypeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ActivityTypeWhereInputRecursive2']
    OR: List['ActivityTypeWhereInputRecursive2']
    NOT: List['ActivityTypeWhereInputRecursive2']


class ActivityTypeWhereInputRecursive2(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    pillar: 'enums.Pillar'
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivityTypeWhereInputRecursive3', List['ActivityTypeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ActivityTypeWhereInputRecursive3']
    OR: List['ActivityTypeWhereInputRecursive3']
    NOT: List['ActivityTypeWhereInputRecursive3']


class ActivityTypeWhereInputRecursive3(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    pillar: 'enums.Pillar'
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivityTypeWhereInputRecursive4', List['ActivityTypeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ActivityTypeWhereInputRecursive4']
    OR: List['ActivityTypeWhereInputRecursive4']
    NOT: List['ActivityTypeWhereInputRecursive4']


class ActivityTypeWhereInputRecursive4(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    pillar: 'enums.Pillar'
    activityLogs: 'ActivityLogListRelationFilter'



# aggregate ActivityType types


    

class ActivityTypeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['ActivityTypeScalarWhereWithAggregatesInputRecursive1']
    OR: List['ActivityTypeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ActivityTypeScalarWhereWithAggregatesInputRecursive1']


class ActivityTypeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['ActivityTypeScalarWhereWithAggregatesInputRecursive2']
    OR: List['ActivityTypeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ActivityTypeScalarWhereWithAggregatesInputRecursive2']


class ActivityTypeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['ActivityTypeScalarWhereWithAggregatesInputRecursive3']
    OR: List['ActivityTypeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ActivityTypeScalarWhereWithAggregatesInputRecursive3']


class ActivityTypeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['ActivityTypeScalarWhereWithAggregatesInputRecursive4']
    OR: List['ActivityTypeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ActivityTypeScalarWhereWithAggregatesInputRecursive4']


class ActivityTypeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ActivityType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    pillar: 'enums.Pillar'



class ActivityTypeGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    pillar: 'enums.Pillar'
    _sum: 'ActivityTypeSumAggregateOutput'
    _avg: 'ActivityTypeAvgAggregateOutput'
    _min: 'ActivityTypeMinAggregateOutput'
    _max: 'ActivityTypeMaxAggregateOutput'
    _count: 'ActivityTypeCountAggregateOutput'


class ActivityTypeAvgAggregateOutput(TypedDict, total=False):
    """ActivityType output for aggregating averages"""
    id: float


class ActivityTypeSumAggregateOutput(TypedDict, total=False):
    """ActivityType output for aggregating sums"""
    id: _int


class ActivityTypeScalarAggregateOutput(TypedDict, total=False):
    """ActivityType output including scalar fields"""
    id: _int
    name: _str
    pillar: 'enums.Pillar'


ActivityTypeMinAggregateOutput = ActivityTypeScalarAggregateOutput
ActivityTypeMaxAggregateOutput = ActivityTypeScalarAggregateOutput


class ActivityTypeMaxAggregateInput(TypedDict, total=False):
    """ActivityType input for aggregating by max"""
    id: bool
    name: bool
    pillar: bool


class ActivityTypeMinAggregateInput(TypedDict, total=False):
    """ActivityType input for aggregating by min"""
    id: bool
    name: bool
    pillar: bool


class ActivityTypeNumberAggregateInput(TypedDict, total=False):
    """ActivityType input for aggregating numbers"""
    id: bool


ActivityTypeAvgAggregateInput = ActivityTypeNumberAggregateInput
ActivityTypeSumAggregateInput = ActivityTypeNumberAggregateInput


ActivityTypeCountAggregateInput = TypedDict(
    'ActivityTypeCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'pillar': bool,
        '_all': bool,
    },
    total=False,
)

ActivityTypeCountAggregateOutput = TypedDict(
    'ActivityTypeCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'pillar': int,
        '_all': int,
    },
    total=False,
)


ActivityTypeKeys = Literal[
    'id',
    'name',
    'pillar',
    'activityLogs',
]
ActivityTypeScalarFieldKeys = Literal[
    'id',
    'name',
    'pillar',
]
ActivityTypeScalarFieldKeysT = TypeVar('ActivityTypeScalarFieldKeysT', bound=ActivityTypeScalarFieldKeys)

ActivityTypeRelationalFieldKeys = Literal[
        'activityLogs',
    ]

# VCType types

class VCTypeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the VCType create method"""
    id: _int
    activityLogs: 'ActivityLogCreateManyNestedWithoutRelationsInput'


class VCTypeCreateInput(VCTypeOptionalCreateInput):
    """Required arguments to the VCType create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VCTypeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the VCType create method, without relations"""
    id: _int


class VCTypeCreateWithoutRelationsInput(VCTypeOptionalCreateWithoutRelationsInput):
    """Required arguments to the VCType create method, without relations"""
    name: _str


class VCTypeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VCTypeCreateWithoutRelationsInput'
    connect: 'VCTypeWhereUniqueInput'


class VCTypeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VCTypeCreateWithoutRelationsInput', List['VCTypeCreateWithoutRelationsInput']]
    connect: Union['VCTypeWhereUniqueInput', List['VCTypeWhereUniqueInput']]


_VCTypeWhereUnique_id_Input = TypedDict(
    '_VCTypeWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

VCTypeWhereUniqueInput = _VCTypeWhereUnique_id_Input


class VCTypeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicBigIntInput, _int]
    name: _str
    activityLogs: 'ActivityLogUpdateManyWithoutRelationsInput'


class VCTypeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicBigIntInput, _int]
    name: _str


class VCTypeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VCTypeCreateWithoutRelationsInput']
    connect: List['VCTypeWhereUniqueInput']
    set: List['VCTypeWhereUniqueInput']
    disconnect: List['VCTypeWhereUniqueInput']
    delete: List['VCTypeWhereUniqueInput']

    # TODO
    # update: List['VCTypeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VCTypeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VCTypeScalarWhereInput']
    # upsert: List['VCTypeUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['VCTypeCreateOrConnectWithoutRelationsInput']


class VCTypeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VCTypeCreateWithoutRelationsInput'
    connect: 'VCTypeWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VCTypeUpdateInput'
    # upsert: 'VCTypeUpsertWithoutRelationsInput'
    # connectOrCreate: 'VCTypeCreateOrConnectWithoutRelationsInput'


class VCTypeUpsertInput(TypedDict):
    create: 'VCTypeCreateInput'
    update: 'VCTypeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_VCType_id_OrderByInput = TypedDict(
    '_VCType_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_VCType_name_OrderByInput = TypedDict(
    '_VCType_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

VCTypeOrderByInput = Union[
    '_VCType_id_OrderByInput',
    '_VCType_name_OrderByInput',
]



# recursive VCType types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VCTypeRelationFilter = TypedDict(
    'VCTypeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VCTypeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VCTypeInclude(TypedDict, total=False):
    """VCType relational arguments"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCType']


    

class UserIncludeFromVCType(TypedDict, total=False):
    """Relational arguments for VCType"""
    sessions: Union[bool, 'FindManySessionArgsFromVCTypeRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive1']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromVCTypeRecursive1']


class UserIncludeFromVCTypeRecursive1(TypedDict, total=False):
    """Relational arguments for VCType"""
    sessions: Union[bool, 'FindManySessionArgsFromVCTypeRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive2']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromVCTypeRecursive2']


class UserIncludeFromVCTypeRecursive2(TypedDict, total=False):
    """Relational arguments for VCType"""
    sessions: Union[bool, 'FindManySessionArgsFromVCTypeRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive3']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromVCTypeRecursive3']


class UserIncludeFromVCTypeRecursive3(TypedDict, total=False):
    """Relational arguments for VCType"""
    sessions: Union[bool, 'FindManySessionArgsFromVCTypeRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive4']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromVCTypeRecursive4']


class UserIncludeFromVCTypeRecursive4(TypedDict, total=False):
    """Relational arguments for VCType"""

    

class UserArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    
    

class FindManyUserArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ActivityTypeIncludeFromVCType(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive1']


class ActivityTypeIncludeFromVCTypeRecursive1(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive2']


class ActivityTypeIncludeFromVCTypeRecursive2(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive3']


class ActivityTypeIncludeFromVCTypeRecursive3(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive4']


class ActivityTypeIncludeFromVCTypeRecursive4(TypedDict, total=False):
    """Relational arguments for VCType"""

    

class ActivityTypeArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class ActivityTypeArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class ActivityTypeArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class ActivityTypeArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class ActivityTypeArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    
    

class FindManyActivityTypeArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class FindManyActivityTypeArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class FindManyActivityTypeArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class FindManyActivityTypeArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class FindManyActivityTypeArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    
    

class VCTypeIncludeFromVCType(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive1']


class VCTypeIncludeFromVCTypeRecursive1(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive2']


class VCTypeIncludeFromVCTypeRecursive2(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive3']


class VCTypeIncludeFromVCTypeRecursive3(TypedDict, total=False):
    """Relational arguments for VCType"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive4']


class VCTypeIncludeFromVCTypeRecursive4(TypedDict, total=False):
    """Relational arguments for VCType"""

    

class VCTypeArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class VCTypeArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class VCTypeArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class VCTypeArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class VCTypeArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    
    

class FindManyVCTypeArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class FindManyVCTypeArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class FindManyVCTypeArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class FindManyVCTypeArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class FindManyVCTypeArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    
    

class SessionIncludeFromVCType(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive1']


class SessionIncludeFromVCTypeRecursive1(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive2']


class SessionIncludeFromVCTypeRecursive2(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive3']


class SessionIncludeFromVCTypeRecursive3(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromVCTypeRecursive4']


class SessionIncludeFromVCTypeRecursive4(TypedDict, total=False):
    """Relational arguments for VCType"""

    

class SessionArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    
    

class FindManySessionArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class ActivityLogIncludeFromVCType(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive1']
    session: Union[bool, 'SessionArgsFromVCTypeRecursive1']
    ActivityType: Union[bool, 'ActivityTypeArgsFromVCTypeRecursive1']
    VCType: Union[bool, 'VCTypeArgsFromVCTypeRecursive1']


class ActivityLogIncludeFromVCTypeRecursive1(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive2']
    session: Union[bool, 'SessionArgsFromVCTypeRecursive2']
    ActivityType: Union[bool, 'ActivityTypeArgsFromVCTypeRecursive2']
    VCType: Union[bool, 'VCTypeArgsFromVCTypeRecursive2']


class ActivityLogIncludeFromVCTypeRecursive2(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive3']
    session: Union[bool, 'SessionArgsFromVCTypeRecursive3']
    ActivityType: Union[bool, 'ActivityTypeArgsFromVCTypeRecursive3']
    VCType: Union[bool, 'VCTypeArgsFromVCTypeRecursive3']


class ActivityLogIncludeFromVCTypeRecursive3(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive4']
    session: Union[bool, 'SessionArgsFromVCTypeRecursive4']
    ActivityType: Union[bool, 'ActivityTypeArgsFromVCTypeRecursive4']
    VCType: Union[bool, 'VCTypeArgsFromVCTypeRecursive4']


class ActivityLogIncludeFromVCTypeRecursive4(TypedDict, total=False):
    """Relational arguments for VCType"""

    

class ActivityLogArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class ActivityLogArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class ActivityLogArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class ActivityLogArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class ActivityLogArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    
    

class FindManyActivityLogArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class FindManyActivityLogArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class FindManyActivityLogArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class FindManyActivityLogArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class FindManyActivityLogArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    
    

class UserLevelIncludeFromVCType(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive1']


class UserLevelIncludeFromVCTypeRecursive1(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive2']


class UserLevelIncludeFromVCTypeRecursive2(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive3']


class UserLevelIncludeFromVCTypeRecursive3(TypedDict, total=False):
    """Relational arguments for VCType"""
    user: Union[bool, 'UserArgsFromVCTypeRecursive4']


class UserLevelIncludeFromVCTypeRecursive4(TypedDict, total=False):
    """Relational arguments for VCType"""

    

class UserLevelArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class UserLevelArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class UserLevelArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class UserLevelArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class UserLevelArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    
    

class FindManyUserLevelArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class FindManyUserLevelArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class FindManyUserLevelArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class FindManyUserLevelArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class FindManyUserLevelArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    
    

class RoleIncludeFromVCType(TypedDict, total=False):
    """Relational arguments for VCType"""


class RoleIncludeFromVCTypeRecursive1(TypedDict, total=False):
    """Relational arguments for VCType"""


class RoleIncludeFromVCTypeRecursive2(TypedDict, total=False):
    """Relational arguments for VCType"""


class RoleIncludeFromVCTypeRecursive3(TypedDict, total=False):
    """Relational arguments for VCType"""


class RoleIncludeFromVCTypeRecursive4(TypedDict, total=False):
    """Relational arguments for VCType"""

    

class RoleArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    
    

class FindManyRoleArgsFromVCType(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromVCTypeRecursive1(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromVCTypeRecursive2(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromVCTypeRecursive3(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromVCTypeRecursive4(TypedDict, total=False):
    """Arguments for VCType"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    


FindManyVCTypeArgs = FindManyVCTypeArgsFromVCType
FindFirstVCTypeArgs = FindManyVCTypeArgsFromVCType


    

class VCTypeWhereInput(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['VCTypeWhereInputRecursive1', List['VCTypeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VCTypeWhereInputRecursive1']
    OR: List['VCTypeWhereInputRecursive1']
    NOT: List['VCTypeWhereInputRecursive1']


class VCTypeWhereInputRecursive1(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['VCTypeWhereInputRecursive2', List['VCTypeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VCTypeWhereInputRecursive2']
    OR: List['VCTypeWhereInputRecursive2']
    NOT: List['VCTypeWhereInputRecursive2']


class VCTypeWhereInputRecursive2(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['VCTypeWhereInputRecursive3', List['VCTypeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VCTypeWhereInputRecursive3']
    OR: List['VCTypeWhereInputRecursive3']
    NOT: List['VCTypeWhereInputRecursive3']


class VCTypeWhereInputRecursive3(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    activityLogs: 'ActivityLogListRelationFilter'

    # should be noted that AND and NOT should be Union['VCTypeWhereInputRecursive4', List['VCTypeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VCTypeWhereInputRecursive4']
    OR: List['VCTypeWhereInputRecursive4']
    NOT: List['VCTypeWhereInputRecursive4']


class VCTypeWhereInputRecursive4(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    activityLogs: 'ActivityLogListRelationFilter'



# aggregate VCType types


    

class VCTypeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['VCTypeScalarWhereWithAggregatesInputRecursive1']
    OR: List['VCTypeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VCTypeScalarWhereWithAggregatesInputRecursive1']


class VCTypeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['VCTypeScalarWhereWithAggregatesInputRecursive2']
    OR: List['VCTypeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VCTypeScalarWhereWithAggregatesInputRecursive2']


class VCTypeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['VCTypeScalarWhereWithAggregatesInputRecursive3']
    OR: List['VCTypeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VCTypeScalarWhereWithAggregatesInputRecursive3']


class VCTypeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['VCTypeScalarWhereWithAggregatesInputRecursive4']
    OR: List['VCTypeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VCTypeScalarWhereWithAggregatesInputRecursive4']


class VCTypeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """VCType arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class VCTypeGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'VCTypeSumAggregateOutput'
    _avg: 'VCTypeAvgAggregateOutput'
    _min: 'VCTypeMinAggregateOutput'
    _max: 'VCTypeMaxAggregateOutput'
    _count: 'VCTypeCountAggregateOutput'


class VCTypeAvgAggregateOutput(TypedDict, total=False):
    """VCType output for aggregating averages"""
    id: float


class VCTypeSumAggregateOutput(TypedDict, total=False):
    """VCType output for aggregating sums"""
    id: _int


class VCTypeScalarAggregateOutput(TypedDict, total=False):
    """VCType output including scalar fields"""
    id: _int
    name: _str


VCTypeMinAggregateOutput = VCTypeScalarAggregateOutput
VCTypeMaxAggregateOutput = VCTypeScalarAggregateOutput


class VCTypeMaxAggregateInput(TypedDict, total=False):
    """VCType input for aggregating by max"""
    id: bool
    name: bool


class VCTypeMinAggregateInput(TypedDict, total=False):
    """VCType input for aggregating by min"""
    id: bool
    name: bool


class VCTypeNumberAggregateInput(TypedDict, total=False):
    """VCType input for aggregating numbers"""
    id: bool


VCTypeAvgAggregateInput = VCTypeNumberAggregateInput
VCTypeSumAggregateInput = VCTypeNumberAggregateInput


VCTypeCountAggregateInput = TypedDict(
    'VCTypeCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

VCTypeCountAggregateOutput = TypedDict(
    'VCTypeCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


VCTypeKeys = Literal[
    'id',
    'name',
    'activityLogs',
]
VCTypeScalarFieldKeys = Literal[
    'id',
    'name',
]
VCTypeScalarFieldKeysT = TypeVar('VCTypeScalarFieldKeysT', bound=VCTypeScalarFieldKeys)

VCTypeRelationalFieldKeys = Literal[
        'activityLogs',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    joinedAt: datetime.datetime
    leftAt: Optional[datetime.datetime]
    activityLogs: 'ActivityLogCreateManyNestedWithoutRelationsInput'
    nick: Optional[_str]
    userId: _int
    status: 'enums.SessionStatus'
    duration: _int


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    activity: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _int
    joinedAt: datetime.datetime
    leftAt: Optional[datetime.datetime]
    nick: Optional[_str]
    userId: _int
    status: 'enums.SessionStatus'
    duration: _int


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    activity: _str


class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]


_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

SessionWhereUniqueInput = _SessionWhereUnique_id_Input


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicBigIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    joinedAt: datetime.datetime
    activity: _str
    leftAt: Optional[datetime.datetime]
    activityLogs: 'ActivityLogUpdateManyWithoutRelationsInput'
    nick: Optional[_str]
    status: 'enums.SessionStatus'
    duration: Union[AtomicIntInput, _int]


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicBigIntInput, _int]
    joinedAt: datetime.datetime
    activity: _str
    leftAt: Optional[datetime.datetime]
    nick: Optional[_str]
    status: 'enums.SessionStatus'
    duration: Union[AtomicIntInput, _int]


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SessionCreateOrConnectWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'
    # connectOrCreate: 'SessionCreateOrConnectWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_joinedAt_OrderByInput = TypedDict(
    '_Session_joinedAt_OrderByInput',
    {
        'joinedAt': 'SortOrder',
    },
    total=True
)

_Session_activity_OrderByInput = TypedDict(
    '_Session_activity_OrderByInput',
    {
        'activity': 'SortOrder',
    },
    total=True
)

_Session_leftAt_OrderByInput = TypedDict(
    '_Session_leftAt_OrderByInput',
    {
        'leftAt': 'SortOrder',
    },
    total=True
)

_Session_nick_OrderByInput = TypedDict(
    '_Session_nick_OrderByInput',
    {
        'nick': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_status_OrderByInput = TypedDict(
    '_Session_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Session_duration_OrderByInput = TypedDict(
    '_Session_duration_OrderByInput',
    {
        'duration': 'SortOrder',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_joinedAt_OrderByInput',
    '_Session_activity_OrderByInput',
    '_Session_leftAt_OrderByInput',
    '_Session_nick_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_status_OrderByInput',
    '_Session_duration_OrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSession']


    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive1']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive2']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive3']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive4']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ActivityTypeIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive1']


class ActivityTypeIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive2']


class ActivityTypeIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive3']


class ActivityTypeIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive4']


class ActivityTypeIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class ActivityTypeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class ActivityTypeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class ActivityTypeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class ActivityTypeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class ActivityTypeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyActivityTypeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class FindManyActivityTypeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class FindManyActivityTypeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class FindManyActivityTypeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class FindManyActivityTypeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    
    

class VCTypeIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive1']


class VCTypeIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive2']


class VCTypeIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive3']


class VCTypeIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive4']


class VCTypeIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VCTypeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class VCTypeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class VCTypeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class VCTypeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class VCTypeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVCTypeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class FindManyVCTypeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class FindManyVCTypeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class FindManyVCTypeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class FindManyVCTypeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class ActivityLogIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    session: Union[bool, 'SessionArgsFromSessionRecursive1']
    ActivityType: Union[bool, 'ActivityTypeArgsFromSessionRecursive1']
    VCType: Union[bool, 'VCTypeArgsFromSessionRecursive1']


class ActivityLogIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    session: Union[bool, 'SessionArgsFromSessionRecursive2']
    ActivityType: Union[bool, 'ActivityTypeArgsFromSessionRecursive2']
    VCType: Union[bool, 'VCTypeArgsFromSessionRecursive2']


class ActivityLogIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    session: Union[bool, 'SessionArgsFromSessionRecursive3']
    ActivityType: Union[bool, 'ActivityTypeArgsFromSessionRecursive3']
    VCType: Union[bool, 'VCTypeArgsFromSessionRecursive3']


class ActivityLogIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    session: Union[bool, 'SessionArgsFromSessionRecursive4']
    ActivityType: Union[bool, 'ActivityTypeArgsFromSessionRecursive4']
    VCType: Union[bool, 'VCTypeArgsFromSessionRecursive4']


class ActivityLogIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class ActivityLogArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class ActivityLogArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class ActivityLogArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class ActivityLogArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class ActivityLogArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyActivityLogArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class FindManyActivityLogArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class FindManyActivityLogArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class FindManyActivityLogArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class FindManyActivityLogArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    
    

class UserLevelIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class UserLevelIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class UserLevelIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class UserLevelIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class UserLevelIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserLevelArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class UserLevelArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class UserLevelArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class UserLevelArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class UserLevelArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserLevelArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class FindManyUserLevelArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class FindManyUserLevelArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class FindManyUserLevelArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class FindManyUserLevelArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    
    

class RoleIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class RoleIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class RoleIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class RoleIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class RoleIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class RoleArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyRoleArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    activity: Union[_str, 'types.StringFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    activityLogs: 'ActivityLogListRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    userId: Union[_int, 'types.BigIntFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    activity: Union[_str, 'types.StringFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    activityLogs: 'ActivityLogListRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    userId: Union[_int, 'types.BigIntFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    activity: Union[_str, 'types.StringFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    activityLogs: 'ActivityLogListRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    userId: Union[_int, 'types.BigIntFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    activity: Union[_str, 'types.StringFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    activityLogs: 'ActivityLogListRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    userId: Union[_int, 'types.BigIntFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    activity: Union[_str, 'types.StringFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    activityLogs: 'ActivityLogListRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    userId: Union[_int, 'types.BigIntFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntFilter']



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    duration: Union[_int, 'types.IntWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _int
    joinedAt: datetime.datetime
    activity: _str
    leftAt: datetime.datetime
    nick: _str
    userId: _int
    status: 'enums.SessionStatus'
    duration: _int
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""
    id: float
    userId: float
    duration: float


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""
    id: _int
    userId: _int
    duration: _int


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _int
    joinedAt: datetime.datetime
    activity: _str
    leftAt: datetime.datetime
    nick: _str
    userId: _int
    status: 'enums.SessionStatus'
    duration: _int


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    joinedAt: bool
    activity: bool
    leftAt: bool
    nick: bool
    userId: bool
    status: bool
    duration: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    joinedAt: bool
    activity: bool
    leftAt: bool
    nick: bool
    userId: bool
    status: bool
    duration: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""
    id: bool
    userId: bool
    duration: bool


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'joinedAt': bool,
        'activity': bool,
        'leftAt': bool,
        'nick': bool,
        'userId': bool,
        'status': bool,
        'duration': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'joinedAt': int,
        'activity': int,
        'leftAt': int,
        'nick': int,
        'userId': int,
        'status': int,
        'duration': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'user',
    'joinedAt',
    'activity',
    'leftAt',
    'activityLogs',
    'nick',
    'userId',
    'status',
    'duration',
]
SessionScalarFieldKeys = Literal[
    'id',
    'joinedAt',
    'activity',
    'leftAt',
    'nick',
    'userId',
    'status',
    'duration',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
        'activityLogs',
    ]

# ActivityLog types

class ActivityLogOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ActivityLog create method"""
    id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    nick: Optional[_str]
    session: 'SessionCreateNestedWithoutRelationsInput'
    joinedAt: datetime.datetime
    leftAt: Optional[datetime.datetime]
    duration: Optional[_int]
    xp: Optional[_int]
    status: 'enums.SessionStatus'
    userId: _int
    sessionId: _int
    ActivityType: 'ActivityTypeCreateNestedWithoutRelationsInput'
    activityTypeId: Optional[_int]
    VCType: 'VCTypeCreateNestedWithoutRelationsInput'
    vCTypeId: Optional[_int]


class ActivityLogCreateInput(ActivityLogOptionalCreateInput):
    """Required arguments to the ActivityLog create method"""
    activity: _str
    activityType: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ActivityLogOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ActivityLog create method, without relations"""
    id: _int
    nick: Optional[_str]
    joinedAt: datetime.datetime
    leftAt: Optional[datetime.datetime]
    duration: Optional[_int]
    xp: Optional[_int]
    status: 'enums.SessionStatus'
    userId: _int
    sessionId: _int
    activityTypeId: Optional[_int]
    vCTypeId: Optional[_int]


class ActivityLogCreateWithoutRelationsInput(ActivityLogOptionalCreateWithoutRelationsInput):
    """Required arguments to the ActivityLog create method, without relations"""
    activity: _str
    activityType: _str


class ActivityLogCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ActivityLogCreateWithoutRelationsInput'
    connect: 'ActivityLogWhereUniqueInput'


class ActivityLogCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ActivityLogCreateWithoutRelationsInput', List['ActivityLogCreateWithoutRelationsInput']]
    connect: Union['ActivityLogWhereUniqueInput', List['ActivityLogWhereUniqueInput']]


_ActivityLogWhereUnique_id_Input = TypedDict(
    '_ActivityLogWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ActivityLogWhereUniqueInput = _ActivityLogWhereUnique_id_Input


class ActivityLogUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicBigIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    nick: Optional[_str]
    session: 'SessionUpdateOneWithoutRelationsInput'
    activity: _str
    activityType: _str
    joinedAt: datetime.datetime
    leftAt: Optional[datetime.datetime]
    duration: Optional[Union[AtomicIntInput, _int]]
    xp: Optional[Union[AtomicIntInput, _int]]
    status: 'enums.SessionStatus'
    ActivityType: 'ActivityTypeUpdateOneWithoutRelationsInput'
    VCType: 'VCTypeUpdateOneWithoutRelationsInput'


class ActivityLogUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicBigIntInput, _int]
    nick: Optional[_str]
    activity: _str
    activityType: _str
    joinedAt: datetime.datetime
    leftAt: Optional[datetime.datetime]
    duration: Optional[Union[AtomicIntInput, _int]]
    xp: Optional[Union[AtomicIntInput, _int]]
    status: 'enums.SessionStatus'


class ActivityLogUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ActivityLogCreateWithoutRelationsInput']
    connect: List['ActivityLogWhereUniqueInput']
    set: List['ActivityLogWhereUniqueInput']
    disconnect: List['ActivityLogWhereUniqueInput']
    delete: List['ActivityLogWhereUniqueInput']

    # TODO
    # update: List['ActivityLogUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ActivityLogUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ActivityLogScalarWhereInput']
    # upsert: List['ActivityLogUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ActivityLogCreateOrConnectWithoutRelationsInput']


class ActivityLogUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ActivityLogCreateWithoutRelationsInput'
    connect: 'ActivityLogWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ActivityLogUpdateInput'
    # upsert: 'ActivityLogUpsertWithoutRelationsInput'
    # connectOrCreate: 'ActivityLogCreateOrConnectWithoutRelationsInput'


class ActivityLogUpsertInput(TypedDict):
    create: 'ActivityLogCreateInput'
    update: 'ActivityLogUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ActivityLog_id_OrderByInput = TypedDict(
    '_ActivityLog_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ActivityLog_nick_OrderByInput = TypedDict(
    '_ActivityLog_nick_OrderByInput',
    {
        'nick': 'SortOrder',
    },
    total=True
)

_ActivityLog_activity_OrderByInput = TypedDict(
    '_ActivityLog_activity_OrderByInput',
    {
        'activity': 'SortOrder',
    },
    total=True
)

_ActivityLog_activityType_OrderByInput = TypedDict(
    '_ActivityLog_activityType_OrderByInput',
    {
        'activityType': 'SortOrder',
    },
    total=True
)

_ActivityLog_joinedAt_OrderByInput = TypedDict(
    '_ActivityLog_joinedAt_OrderByInput',
    {
        'joinedAt': 'SortOrder',
    },
    total=True
)

_ActivityLog_leftAt_OrderByInput = TypedDict(
    '_ActivityLog_leftAt_OrderByInput',
    {
        'leftAt': 'SortOrder',
    },
    total=True
)

_ActivityLog_duration_OrderByInput = TypedDict(
    '_ActivityLog_duration_OrderByInput',
    {
        'duration': 'SortOrder',
    },
    total=True
)

_ActivityLog_xp_OrderByInput = TypedDict(
    '_ActivityLog_xp_OrderByInput',
    {
        'xp': 'SortOrder',
    },
    total=True
)

_ActivityLog_status_OrderByInput = TypedDict(
    '_ActivityLog_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_ActivityLog_userId_OrderByInput = TypedDict(
    '_ActivityLog_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ActivityLog_sessionId_OrderByInput = TypedDict(
    '_ActivityLog_sessionId_OrderByInput',
    {
        'sessionId': 'SortOrder',
    },
    total=True
)

_ActivityLog_activityTypeId_OrderByInput = TypedDict(
    '_ActivityLog_activityTypeId_OrderByInput',
    {
        'activityTypeId': 'SortOrder',
    },
    total=True
)

_ActivityLog_vCTypeId_OrderByInput = TypedDict(
    '_ActivityLog_vCTypeId_OrderByInput',
    {
        'vCTypeId': 'SortOrder',
    },
    total=True
)

ActivityLogOrderByInput = Union[
    '_ActivityLog_id_OrderByInput',
    '_ActivityLog_nick_OrderByInput',
    '_ActivityLog_activity_OrderByInput',
    '_ActivityLog_activityType_OrderByInput',
    '_ActivityLog_joinedAt_OrderByInput',
    '_ActivityLog_leftAt_OrderByInput',
    '_ActivityLog_duration_OrderByInput',
    '_ActivityLog_xp_OrderByInput',
    '_ActivityLog_status_OrderByInput',
    '_ActivityLog_userId_OrderByInput',
    '_ActivityLog_sessionId_OrderByInput',
    '_ActivityLog_activityTypeId_OrderByInput',
    '_ActivityLog_vCTypeId_OrderByInput',
]



# recursive ActivityLog types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ActivityLogRelationFilter = TypedDict(
    'ActivityLogRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ActivityLogListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ActivityLogInclude(TypedDict, total=False):
    """ActivityLog relational arguments"""
    user: Union[bool, 'UserArgsFromActivityLog']
    session: Union[bool, 'SessionArgsFromActivityLog']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityLog']
    VCType: Union[bool, 'VCTypeArgsFromActivityLog']


    

class UserIncludeFromActivityLog(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityLogRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive1']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityLogRecursive1']


class UserIncludeFromActivityLogRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityLogRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive2']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityLogRecursive2']


class UserIncludeFromActivityLogRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityLogRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive3']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityLogRecursive3']


class UserIncludeFromActivityLogRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    sessions: Union[bool, 'FindManySessionArgsFromActivityLogRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive4']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromActivityLogRecursive4']


class UserIncludeFromActivityLogRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityLog"""

    

class UserArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    
    

class FindManyUserArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ActivityTypeIncludeFromActivityLog(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive1']


class ActivityTypeIncludeFromActivityLogRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive2']


class ActivityTypeIncludeFromActivityLogRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive3']


class ActivityTypeIncludeFromActivityLogRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive4']


class ActivityTypeIncludeFromActivityLogRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityLog"""

    

class ActivityTypeArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class ActivityTypeArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class ActivityTypeArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class ActivityTypeArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class ActivityTypeArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    
    

class FindManyActivityTypeArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class FindManyActivityTypeArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class FindManyActivityTypeArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class FindManyActivityTypeArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class FindManyActivityTypeArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    
    

class VCTypeIncludeFromActivityLog(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive1']


class VCTypeIncludeFromActivityLogRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive2']


class VCTypeIncludeFromActivityLogRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive3']


class VCTypeIncludeFromActivityLogRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive4']


class VCTypeIncludeFromActivityLogRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityLog"""

    

class VCTypeArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class VCTypeArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class VCTypeArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class VCTypeArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class VCTypeArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    
    

class FindManyVCTypeArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class FindManyVCTypeArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class FindManyVCTypeArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class FindManyVCTypeArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class FindManyVCTypeArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    
    

class SessionIncludeFromActivityLog(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive1']


class SessionIncludeFromActivityLogRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive2']


class SessionIncludeFromActivityLogRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive3']


class SessionIncludeFromActivityLogRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromActivityLogRecursive4']


class SessionIncludeFromActivityLogRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityLog"""

    

class SessionArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    
    

class FindManySessionArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class ActivityLogIncludeFromActivityLog(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive1']
    session: Union[bool, 'SessionArgsFromActivityLogRecursive1']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityLogRecursive1']
    VCType: Union[bool, 'VCTypeArgsFromActivityLogRecursive1']


class ActivityLogIncludeFromActivityLogRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive2']
    session: Union[bool, 'SessionArgsFromActivityLogRecursive2']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityLogRecursive2']
    VCType: Union[bool, 'VCTypeArgsFromActivityLogRecursive2']


class ActivityLogIncludeFromActivityLogRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive3']
    session: Union[bool, 'SessionArgsFromActivityLogRecursive3']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityLogRecursive3']
    VCType: Union[bool, 'VCTypeArgsFromActivityLogRecursive3']


class ActivityLogIncludeFromActivityLogRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive4']
    session: Union[bool, 'SessionArgsFromActivityLogRecursive4']
    ActivityType: Union[bool, 'ActivityTypeArgsFromActivityLogRecursive4']
    VCType: Union[bool, 'VCTypeArgsFromActivityLogRecursive4']


class ActivityLogIncludeFromActivityLogRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityLog"""

    

class ActivityLogArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class ActivityLogArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class ActivityLogArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class ActivityLogArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class ActivityLogArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    
    

class FindManyActivityLogArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class FindManyActivityLogArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class FindManyActivityLogArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class FindManyActivityLogArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class FindManyActivityLogArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    
    

class UserLevelIncludeFromActivityLog(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive1']


class UserLevelIncludeFromActivityLogRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive2']


class UserLevelIncludeFromActivityLogRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive3']


class UserLevelIncludeFromActivityLogRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityLog"""
    user: Union[bool, 'UserArgsFromActivityLogRecursive4']


class UserLevelIncludeFromActivityLogRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityLog"""

    

class UserLevelArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class UserLevelArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class UserLevelArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class UserLevelArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class UserLevelArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    
    

class FindManyUserLevelArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class FindManyUserLevelArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class FindManyUserLevelArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class FindManyUserLevelArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class FindManyUserLevelArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    
    

class RoleIncludeFromActivityLog(TypedDict, total=False):
    """Relational arguments for ActivityLog"""


class RoleIncludeFromActivityLogRecursive1(TypedDict, total=False):
    """Relational arguments for ActivityLog"""


class RoleIncludeFromActivityLogRecursive2(TypedDict, total=False):
    """Relational arguments for ActivityLog"""


class RoleIncludeFromActivityLogRecursive3(TypedDict, total=False):
    """Relational arguments for ActivityLog"""


class RoleIncludeFromActivityLogRecursive4(TypedDict, total=False):
    """Relational arguments for ActivityLog"""

    

class RoleArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    
    

class FindManyRoleArgsFromActivityLog(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromActivityLogRecursive1(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromActivityLogRecursive2(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromActivityLogRecursive3(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromActivityLogRecursive4(TypedDict, total=False):
    """Arguments for ActivityLog"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    


FindManyActivityLogArgs = FindManyActivityLogArgsFromActivityLog
FindFirstActivityLogArgs = FindManyActivityLogArgsFromActivityLog


    

class ActivityLogWhereInput(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    session: 'SessionRelationFilter'
    activity: Union[_str, 'types.StringFilter']
    activityType: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    duration: Union[None, _int, 'types.IntFilter']
    xp: Union[None, _int, 'types.IntFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntFilter']
    sessionId: Union[_int, 'types.BigIntFilter']
    ActivityType: 'ActivityTypeRelationFilter'
    activityTypeId: Union[None, _int, 'types.BigIntFilter']
    VCType: 'VCTypeRelationFilter'
    vCTypeId: Union[None, _int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['ActivityLogWhereInputRecursive1', List['ActivityLogWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ActivityLogWhereInputRecursive1']
    OR: List['ActivityLogWhereInputRecursive1']
    NOT: List['ActivityLogWhereInputRecursive1']


class ActivityLogWhereInputRecursive1(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    session: 'SessionRelationFilter'
    activity: Union[_str, 'types.StringFilter']
    activityType: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    duration: Union[None, _int, 'types.IntFilter']
    xp: Union[None, _int, 'types.IntFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntFilter']
    sessionId: Union[_int, 'types.BigIntFilter']
    ActivityType: 'ActivityTypeRelationFilter'
    activityTypeId: Union[None, _int, 'types.BigIntFilter']
    VCType: 'VCTypeRelationFilter'
    vCTypeId: Union[None, _int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['ActivityLogWhereInputRecursive2', List['ActivityLogWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ActivityLogWhereInputRecursive2']
    OR: List['ActivityLogWhereInputRecursive2']
    NOT: List['ActivityLogWhereInputRecursive2']


class ActivityLogWhereInputRecursive2(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    session: 'SessionRelationFilter'
    activity: Union[_str, 'types.StringFilter']
    activityType: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    duration: Union[None, _int, 'types.IntFilter']
    xp: Union[None, _int, 'types.IntFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntFilter']
    sessionId: Union[_int, 'types.BigIntFilter']
    ActivityType: 'ActivityTypeRelationFilter'
    activityTypeId: Union[None, _int, 'types.BigIntFilter']
    VCType: 'VCTypeRelationFilter'
    vCTypeId: Union[None, _int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['ActivityLogWhereInputRecursive3', List['ActivityLogWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ActivityLogWhereInputRecursive3']
    OR: List['ActivityLogWhereInputRecursive3']
    NOT: List['ActivityLogWhereInputRecursive3']


class ActivityLogWhereInputRecursive3(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    session: 'SessionRelationFilter'
    activity: Union[_str, 'types.StringFilter']
    activityType: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    duration: Union[None, _int, 'types.IntFilter']
    xp: Union[None, _int, 'types.IntFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntFilter']
    sessionId: Union[_int, 'types.BigIntFilter']
    ActivityType: 'ActivityTypeRelationFilter'
    activityTypeId: Union[None, _int, 'types.BigIntFilter']
    VCType: 'VCTypeRelationFilter'
    vCTypeId: Union[None, _int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['ActivityLogWhereInputRecursive4', List['ActivityLogWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ActivityLogWhereInputRecursive4']
    OR: List['ActivityLogWhereInputRecursive4']
    NOT: List['ActivityLogWhereInputRecursive4']


class ActivityLogWhereInputRecursive4(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    nick: Union[None, _str, 'types.StringFilter']
    session: 'SessionRelationFilter'
    activity: Union[_str, 'types.StringFilter']
    activityType: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    leftAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    duration: Union[None, _int, 'types.IntFilter']
    xp: Union[None, _int, 'types.IntFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntFilter']
    sessionId: Union[_int, 'types.BigIntFilter']
    ActivityType: 'ActivityTypeRelationFilter'
    activityTypeId: Union[None, _int, 'types.BigIntFilter']
    VCType: 'VCTypeRelationFilter'
    vCTypeId: Union[None, _int, 'types.BigIntFilter']



# aggregate ActivityLog types


    

class ActivityLogScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    activityType: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    sessionId: Union[_int, 'types.BigIntWithAggregatesFilter']
    activityTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']
    vCTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['ActivityLogScalarWhereWithAggregatesInputRecursive1']
    OR: List['ActivityLogScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ActivityLogScalarWhereWithAggregatesInputRecursive1']


class ActivityLogScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    activityType: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    sessionId: Union[_int, 'types.BigIntWithAggregatesFilter']
    activityTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']
    vCTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['ActivityLogScalarWhereWithAggregatesInputRecursive2']
    OR: List['ActivityLogScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ActivityLogScalarWhereWithAggregatesInputRecursive2']


class ActivityLogScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    activityType: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    sessionId: Union[_int, 'types.BigIntWithAggregatesFilter']
    activityTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']
    vCTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['ActivityLogScalarWhereWithAggregatesInputRecursive3']
    OR: List['ActivityLogScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ActivityLogScalarWhereWithAggregatesInputRecursive3']


class ActivityLogScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    activityType: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    sessionId: Union[_int, 'types.BigIntWithAggregatesFilter']
    activityTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']
    vCTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['ActivityLogScalarWhereWithAggregatesInputRecursive4']
    OR: List['ActivityLogScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ActivityLogScalarWhereWithAggregatesInputRecursive4']


class ActivityLogScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ActivityLog arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    nick: Union[_str, 'types.StringWithAggregatesFilter']
    activity: Union[_str, 'types.StringWithAggregatesFilter']
    activityType: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    leftAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    duration: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.SessionStatus'
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']
    sessionId: Union[_int, 'types.BigIntWithAggregatesFilter']
    activityTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']
    vCTypeId: Union[_int, 'types.BigIntWithAggregatesFilter']



class ActivityLogGroupByOutput(TypedDict, total=False):
    id: _int
    nick: _str
    activity: _str
    activityType: _str
    joinedAt: datetime.datetime
    leftAt: datetime.datetime
    duration: _int
    xp: _int
    status: 'enums.SessionStatus'
    userId: _int
    sessionId: _int
    activityTypeId: _int
    vCTypeId: _int
    _sum: 'ActivityLogSumAggregateOutput'
    _avg: 'ActivityLogAvgAggregateOutput'
    _min: 'ActivityLogMinAggregateOutput'
    _max: 'ActivityLogMaxAggregateOutput'
    _count: 'ActivityLogCountAggregateOutput'


class ActivityLogAvgAggregateOutput(TypedDict, total=False):
    """ActivityLog output for aggregating averages"""
    id: float
    duration: float
    xp: float
    userId: float
    sessionId: float
    activityTypeId: float
    vCTypeId: float


class ActivityLogSumAggregateOutput(TypedDict, total=False):
    """ActivityLog output for aggregating sums"""
    id: _int
    duration: _int
    xp: _int
    userId: _int
    sessionId: _int
    activityTypeId: _int
    vCTypeId: _int


class ActivityLogScalarAggregateOutput(TypedDict, total=False):
    """ActivityLog output including scalar fields"""
    id: _int
    nick: _str
    activity: _str
    activityType: _str
    joinedAt: datetime.datetime
    leftAt: datetime.datetime
    duration: _int
    xp: _int
    status: 'enums.SessionStatus'
    userId: _int
    sessionId: _int
    activityTypeId: _int
    vCTypeId: _int


ActivityLogMinAggregateOutput = ActivityLogScalarAggregateOutput
ActivityLogMaxAggregateOutput = ActivityLogScalarAggregateOutput


class ActivityLogMaxAggregateInput(TypedDict, total=False):
    """ActivityLog input for aggregating by max"""
    id: bool
    nick: bool
    activity: bool
    activityType: bool
    joinedAt: bool
    leftAt: bool
    duration: bool
    xp: bool
    status: bool
    userId: bool
    sessionId: bool
    activityTypeId: bool
    vCTypeId: bool


class ActivityLogMinAggregateInput(TypedDict, total=False):
    """ActivityLog input for aggregating by min"""
    id: bool
    nick: bool
    activity: bool
    activityType: bool
    joinedAt: bool
    leftAt: bool
    duration: bool
    xp: bool
    status: bool
    userId: bool
    sessionId: bool
    activityTypeId: bool
    vCTypeId: bool


class ActivityLogNumberAggregateInput(TypedDict, total=False):
    """ActivityLog input for aggregating numbers"""
    id: bool
    duration: bool
    xp: bool
    userId: bool
    sessionId: bool
    activityTypeId: bool
    vCTypeId: bool


ActivityLogAvgAggregateInput = ActivityLogNumberAggregateInput
ActivityLogSumAggregateInput = ActivityLogNumberAggregateInput


ActivityLogCountAggregateInput = TypedDict(
    'ActivityLogCountAggregateInput',
    {
        'id': bool,
        'nick': bool,
        'activity': bool,
        'activityType': bool,
        'joinedAt': bool,
        'leftAt': bool,
        'duration': bool,
        'xp': bool,
        'status': bool,
        'userId': bool,
        'sessionId': bool,
        'activityTypeId': bool,
        'vCTypeId': bool,
        '_all': bool,
    },
    total=False,
)

ActivityLogCountAggregateOutput = TypedDict(
    'ActivityLogCountAggregateOutput',
    {
        'id': int,
        'nick': int,
        'activity': int,
        'activityType': int,
        'joinedAt': int,
        'leftAt': int,
        'duration': int,
        'xp': int,
        'status': int,
        'userId': int,
        'sessionId': int,
        'activityTypeId': int,
        'vCTypeId': int,
        '_all': int,
    },
    total=False,
)


ActivityLogKeys = Literal[
    'id',
    'user',
    'nick',
    'session',
    'activity',
    'activityType',
    'joinedAt',
    'leftAt',
    'duration',
    'xp',
    'status',
    'userId',
    'sessionId',
    'ActivityType',
    'activityTypeId',
    'VCType',
    'vCTypeId',
]
ActivityLogScalarFieldKeys = Literal[
    'id',
    'nick',
    'activity',
    'activityType',
    'joinedAt',
    'leftAt',
    'duration',
    'xp',
    'status',
    'userId',
    'sessionId',
    'activityTypeId',
    'vCTypeId',
]
ActivityLogScalarFieldKeysT = TypeVar('ActivityLogScalarFieldKeysT', bound=ActivityLogScalarFieldKeys)

ActivityLogRelationalFieldKeys = Literal[
        'user',
        'session',
        'ActivityType',
        'VCType',
    ]

# UserLevel types

class UserLevelOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserLevel create method"""
    id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    level: _int
    xp: _int
    userId: _int


class UserLevelCreateInput(UserLevelOptionalCreateInput):
    """Required arguments to the UserLevel create method"""
    pillar: 'enums.Pillar'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserLevelOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserLevel create method, without relations"""
    id: _int
    level: _int
    xp: _int
    userId: _int


class UserLevelCreateWithoutRelationsInput(UserLevelOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserLevel create method, without relations"""
    pillar: 'enums.Pillar'


class UserLevelCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserLevelCreateWithoutRelationsInput'
    connect: 'UserLevelWhereUniqueInput'


class UserLevelCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserLevelCreateWithoutRelationsInput', List['UserLevelCreateWithoutRelationsInput']]
    connect: Union['UserLevelWhereUniqueInput', List['UserLevelWhereUniqueInput']]


_UserLevelWhereUnique_id_Input = TypedDict(
    '_UserLevelWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

UserLevelWhereUniqueInput = _UserLevelWhereUnique_id_Input


class UserLevelUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicBigIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    pillar: 'enums.Pillar'
    level: Union[AtomicIntInput, _int]
    xp: Union[AtomicIntInput, _int]


class UserLevelUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicBigIntInput, _int]
    pillar: 'enums.Pillar'
    level: Union[AtomicIntInput, _int]
    xp: Union[AtomicIntInput, _int]


class UserLevelUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserLevelCreateWithoutRelationsInput']
    connect: List['UserLevelWhereUniqueInput']
    set: List['UserLevelWhereUniqueInput']
    disconnect: List['UserLevelWhereUniqueInput']
    delete: List['UserLevelWhereUniqueInput']

    # TODO
    # update: List['UserLevelUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserLevelUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserLevelScalarWhereInput']
    # upsert: List['UserLevelUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserLevelCreateOrConnectWithoutRelationsInput']


class UserLevelUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserLevelCreateWithoutRelationsInput'
    connect: 'UserLevelWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserLevelUpdateInput'
    # upsert: 'UserLevelUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserLevelCreateOrConnectWithoutRelationsInput'


class UserLevelUpsertInput(TypedDict):
    create: 'UserLevelCreateInput'
    update: 'UserLevelUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserLevel_id_OrderByInput = TypedDict(
    '_UserLevel_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserLevel_pillar_OrderByInput = TypedDict(
    '_UserLevel_pillar_OrderByInput',
    {
        'pillar': 'SortOrder',
    },
    total=True
)

_UserLevel_level_OrderByInput = TypedDict(
    '_UserLevel_level_OrderByInput',
    {
        'level': 'SortOrder',
    },
    total=True
)

_UserLevel_xp_OrderByInput = TypedDict(
    '_UserLevel_xp_OrderByInput',
    {
        'xp': 'SortOrder',
    },
    total=True
)

_UserLevel_userId_OrderByInput = TypedDict(
    '_UserLevel_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

UserLevelOrderByInput = Union[
    '_UserLevel_id_OrderByInput',
    '_UserLevel_pillar_OrderByInput',
    '_UserLevel_level_OrderByInput',
    '_UserLevel_xp_OrderByInput',
    '_UserLevel_userId_OrderByInput',
]



# recursive UserLevel types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserLevelRelationFilter = TypedDict(
    'UserLevelRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserLevelListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserLevelInclude(TypedDict, total=False):
    """UserLevel relational arguments"""
    user: Union[bool, 'UserArgsFromUserLevel']


    

class UserIncludeFromUserLevel(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    sessions: Union[bool, 'FindManySessionArgsFromUserLevelRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive1']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserLevelRecursive1']


class UserIncludeFromUserLevelRecursive1(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    sessions: Union[bool, 'FindManySessionArgsFromUserLevelRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive2']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserLevelRecursive2']


class UserIncludeFromUserLevelRecursive2(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    sessions: Union[bool, 'FindManySessionArgsFromUserLevelRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive3']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserLevelRecursive3']


class UserIncludeFromUserLevelRecursive3(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    sessions: Union[bool, 'FindManySessionArgsFromUserLevelRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive4']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromUserLevelRecursive4']


class UserIncludeFromUserLevelRecursive4(TypedDict, total=False):
    """Relational arguments for UserLevel"""

    

class UserArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    
    

class FindManyUserArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ActivityTypeIncludeFromUserLevel(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive1']


class ActivityTypeIncludeFromUserLevelRecursive1(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive2']


class ActivityTypeIncludeFromUserLevelRecursive2(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive3']


class ActivityTypeIncludeFromUserLevelRecursive3(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive4']


class ActivityTypeIncludeFromUserLevelRecursive4(TypedDict, total=False):
    """Relational arguments for UserLevel"""

    

class ActivityTypeArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class ActivityTypeArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class ActivityTypeArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class ActivityTypeArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class ActivityTypeArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    
    

class FindManyActivityTypeArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class FindManyActivityTypeArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class FindManyActivityTypeArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class FindManyActivityTypeArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class FindManyActivityTypeArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    
    

class VCTypeIncludeFromUserLevel(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive1']


class VCTypeIncludeFromUserLevelRecursive1(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive2']


class VCTypeIncludeFromUserLevelRecursive2(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive3']


class VCTypeIncludeFromUserLevelRecursive3(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive4']


class VCTypeIncludeFromUserLevelRecursive4(TypedDict, total=False):
    """Relational arguments for UserLevel"""

    

class VCTypeArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class VCTypeArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class VCTypeArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class VCTypeArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class VCTypeArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    
    

class FindManyVCTypeArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class FindManyVCTypeArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class FindManyVCTypeArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class FindManyVCTypeArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class FindManyVCTypeArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    
    

class SessionIncludeFromUserLevel(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive1']


class SessionIncludeFromUserLevelRecursive1(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive2']


class SessionIncludeFromUserLevelRecursive2(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive3']


class SessionIncludeFromUserLevelRecursive3(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromUserLevelRecursive4']


class SessionIncludeFromUserLevelRecursive4(TypedDict, total=False):
    """Relational arguments for UserLevel"""

    

class SessionArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    
    

class FindManySessionArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class ActivityLogIncludeFromUserLevel(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive1']
    session: Union[bool, 'SessionArgsFromUserLevelRecursive1']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserLevelRecursive1']
    VCType: Union[bool, 'VCTypeArgsFromUserLevelRecursive1']


class ActivityLogIncludeFromUserLevelRecursive1(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive2']
    session: Union[bool, 'SessionArgsFromUserLevelRecursive2']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserLevelRecursive2']
    VCType: Union[bool, 'VCTypeArgsFromUserLevelRecursive2']


class ActivityLogIncludeFromUserLevelRecursive2(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive3']
    session: Union[bool, 'SessionArgsFromUserLevelRecursive3']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserLevelRecursive3']
    VCType: Union[bool, 'VCTypeArgsFromUserLevelRecursive3']


class ActivityLogIncludeFromUserLevelRecursive3(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive4']
    session: Union[bool, 'SessionArgsFromUserLevelRecursive4']
    ActivityType: Union[bool, 'ActivityTypeArgsFromUserLevelRecursive4']
    VCType: Union[bool, 'VCTypeArgsFromUserLevelRecursive4']


class ActivityLogIncludeFromUserLevelRecursive4(TypedDict, total=False):
    """Relational arguments for UserLevel"""

    

class ActivityLogArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class ActivityLogArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class ActivityLogArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class ActivityLogArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class ActivityLogArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    
    

class FindManyActivityLogArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class FindManyActivityLogArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class FindManyActivityLogArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class FindManyActivityLogArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class FindManyActivityLogArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    
    

class UserLevelIncludeFromUserLevel(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive1']


class UserLevelIncludeFromUserLevelRecursive1(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive2']


class UserLevelIncludeFromUserLevelRecursive2(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive3']


class UserLevelIncludeFromUserLevelRecursive3(TypedDict, total=False):
    """Relational arguments for UserLevel"""
    user: Union[bool, 'UserArgsFromUserLevelRecursive4']


class UserLevelIncludeFromUserLevelRecursive4(TypedDict, total=False):
    """Relational arguments for UserLevel"""

    

class UserLevelArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class UserLevelArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class UserLevelArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class UserLevelArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class UserLevelArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    
    

class FindManyUserLevelArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class FindManyUserLevelArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class FindManyUserLevelArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class FindManyUserLevelArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class FindManyUserLevelArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    
    

class RoleIncludeFromUserLevel(TypedDict, total=False):
    """Relational arguments for UserLevel"""


class RoleIncludeFromUserLevelRecursive1(TypedDict, total=False):
    """Relational arguments for UserLevel"""


class RoleIncludeFromUserLevelRecursive2(TypedDict, total=False):
    """Relational arguments for UserLevel"""


class RoleIncludeFromUserLevelRecursive3(TypedDict, total=False):
    """Relational arguments for UserLevel"""


class RoleIncludeFromUserLevelRecursive4(TypedDict, total=False):
    """Relational arguments for UserLevel"""

    

class RoleArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    
    

class FindManyRoleArgsFromUserLevel(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromUserLevelRecursive1(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromUserLevelRecursive2(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromUserLevelRecursive3(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromUserLevelRecursive4(TypedDict, total=False):
    """Arguments for UserLevel"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    


FindManyUserLevelArgs = FindManyUserLevelArgsFromUserLevel
FindFirstUserLevelArgs = FindManyUserLevelArgsFromUserLevel


    

class UserLevelWhereInput(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntFilter']
    xp: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['UserLevelWhereInputRecursive1', List['UserLevelWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserLevelWhereInputRecursive1']
    OR: List['UserLevelWhereInputRecursive1']
    NOT: List['UserLevelWhereInputRecursive1']


class UserLevelWhereInputRecursive1(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntFilter']
    xp: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['UserLevelWhereInputRecursive2', List['UserLevelWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserLevelWhereInputRecursive2']
    OR: List['UserLevelWhereInputRecursive2']
    NOT: List['UserLevelWhereInputRecursive2']


class UserLevelWhereInputRecursive2(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntFilter']
    xp: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['UserLevelWhereInputRecursive3', List['UserLevelWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserLevelWhereInputRecursive3']
    OR: List['UserLevelWhereInputRecursive3']
    NOT: List['UserLevelWhereInputRecursive3']


class UserLevelWhereInputRecursive3(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntFilter']
    xp: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.BigIntFilter']

    # should be noted that AND and NOT should be Union['UserLevelWhereInputRecursive4', List['UserLevelWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserLevelWhereInputRecursive4']
    OR: List['UserLevelWhereInputRecursive4']
    NOT: List['UserLevelWhereInputRecursive4']


class UserLevelWhereInputRecursive4(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    user: 'UserRelationFilter'
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntFilter']
    xp: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.BigIntFilter']



# aggregate UserLevel types


    

class UserLevelScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['UserLevelScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserLevelScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserLevelScalarWhereWithAggregatesInputRecursive1']


class UserLevelScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['UserLevelScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserLevelScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserLevelScalarWhereWithAggregatesInputRecursive2']


class UserLevelScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['UserLevelScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserLevelScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserLevelScalarWhereWithAggregatesInputRecursive3']


class UserLevelScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']

    AND: List['UserLevelScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserLevelScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserLevelScalarWhereWithAggregatesInputRecursive4']


class UserLevelScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserLevel arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    pillar: 'enums.Pillar'
    level: Union[_int, 'types.IntWithAggregatesFilter']
    xp: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.BigIntWithAggregatesFilter']



class UserLevelGroupByOutput(TypedDict, total=False):
    id: _int
    pillar: 'enums.Pillar'
    level: _int
    xp: _int
    userId: _int
    _sum: 'UserLevelSumAggregateOutput'
    _avg: 'UserLevelAvgAggregateOutput'
    _min: 'UserLevelMinAggregateOutput'
    _max: 'UserLevelMaxAggregateOutput'
    _count: 'UserLevelCountAggregateOutput'


class UserLevelAvgAggregateOutput(TypedDict, total=False):
    """UserLevel output for aggregating averages"""
    id: float
    level: float
    xp: float
    userId: float


class UserLevelSumAggregateOutput(TypedDict, total=False):
    """UserLevel output for aggregating sums"""
    id: _int
    level: _int
    xp: _int
    userId: _int


class UserLevelScalarAggregateOutput(TypedDict, total=False):
    """UserLevel output including scalar fields"""
    id: _int
    pillar: 'enums.Pillar'
    level: _int
    xp: _int
    userId: _int


UserLevelMinAggregateOutput = UserLevelScalarAggregateOutput
UserLevelMaxAggregateOutput = UserLevelScalarAggregateOutput


class UserLevelMaxAggregateInput(TypedDict, total=False):
    """UserLevel input for aggregating by max"""
    id: bool
    pillar: bool
    level: bool
    xp: bool
    userId: bool


class UserLevelMinAggregateInput(TypedDict, total=False):
    """UserLevel input for aggregating by min"""
    id: bool
    pillar: bool
    level: bool
    xp: bool
    userId: bool


class UserLevelNumberAggregateInput(TypedDict, total=False):
    """UserLevel input for aggregating numbers"""
    id: bool
    level: bool
    xp: bool
    userId: bool


UserLevelAvgAggregateInput = UserLevelNumberAggregateInput
UserLevelSumAggregateInput = UserLevelNumberAggregateInput


UserLevelCountAggregateInput = TypedDict(
    'UserLevelCountAggregateInput',
    {
        'id': bool,
        'pillar': bool,
        'level': bool,
        'xp': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

UserLevelCountAggregateOutput = TypedDict(
    'UserLevelCountAggregateOutput',
    {
        'id': int,
        'pillar': int,
        'level': int,
        'xp': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


UserLevelKeys = Literal[
    'id',
    'user',
    'pillar',
    'level',
    'xp',
    'userId',
]
UserLevelScalarFieldKeys = Literal[
    'id',
    'pillar',
    'level',
    'xp',
    'userId',
]
UserLevelScalarFieldKeysT = TypeVar('UserLevelScalarFieldKeysT', bound=UserLevelScalarFieldKeys)

UserLevelRelationalFieldKeys = Literal[
        'user',
    ]

# Role types

class RoleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Role create method"""
    id: _int


class RoleCreateInput(RoleOptionalCreateInput):
    """Required arguments to the Role create method"""
    name: _str
    minLevel: _int
    pillar: 'enums.Pillar'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RoleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Role create method, without relations"""
    id: _int


class RoleCreateWithoutRelationsInput(RoleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Role create method, without relations"""
    name: _str
    minLevel: _int
    pillar: 'enums.Pillar'


class RoleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RoleCreateWithoutRelationsInput'
    connect: 'RoleWhereUniqueInput'


class RoleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RoleCreateWithoutRelationsInput', List['RoleCreateWithoutRelationsInput']]
    connect: Union['RoleWhereUniqueInput', List['RoleWhereUniqueInput']]


_RoleWhereUnique_id_Input = TypedDict(
    '_RoleWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

RoleWhereUniqueInput = _RoleWhereUnique_id_Input


class RoleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicBigIntInput, _int]
    name: _str
    minLevel: Union[AtomicIntInput, _int]
    pillar: 'enums.Pillar'


class RoleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicBigIntInput, _int]
    name: _str
    minLevel: Union[AtomicIntInput, _int]
    pillar: 'enums.Pillar'


class RoleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RoleCreateWithoutRelationsInput']
    connect: List['RoleWhereUniqueInput']
    set: List['RoleWhereUniqueInput']
    disconnect: List['RoleWhereUniqueInput']
    delete: List['RoleWhereUniqueInput']

    # TODO
    # update: List['RoleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RoleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RoleScalarWhereInput']
    # upsert: List['RoleUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['RoleCreateOrConnectWithoutRelationsInput']


class RoleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RoleCreateWithoutRelationsInput'
    connect: 'RoleWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RoleUpdateInput'
    # upsert: 'RoleUpsertWithoutRelationsInput'
    # connectOrCreate: 'RoleCreateOrConnectWithoutRelationsInput'


class RoleUpsertInput(TypedDict):
    create: 'RoleCreateInput'
    update: 'RoleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Role_id_OrderByInput = TypedDict(
    '_Role_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Role_name_OrderByInput = TypedDict(
    '_Role_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Role_minLevel_OrderByInput = TypedDict(
    '_Role_minLevel_OrderByInput',
    {
        'minLevel': 'SortOrder',
    },
    total=True
)

_Role_pillar_OrderByInput = TypedDict(
    '_Role_pillar_OrderByInput',
    {
        'pillar': 'SortOrder',
    },
    total=True
)

RoleOrderByInput = Union[
    '_Role_id_OrderByInput',
    '_Role_name_OrderByInput',
    '_Role_minLevel_OrderByInput',
    '_Role_pillar_OrderByInput',
]



# recursive Role types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RoleRelationFilter = TypedDict(
    'RoleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RoleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RoleInclude(TypedDict, total=False):
    """Role relational arguments"""


    

class UserIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    sessions: Union[bool, 'FindManySessionArgsFromRoleRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive1']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromRoleRecursive1']


class UserIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    sessions: Union[bool, 'FindManySessionArgsFromRoleRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive2']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromRoleRecursive2']


class UserIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    sessions: Union[bool, 'FindManySessionArgsFromRoleRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive3']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromRoleRecursive3']


class UserIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    sessions: Union[bool, 'FindManySessionArgsFromRoleRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive4']
    userLevels: Union[bool, 'FindManyUserLevelArgsFromRoleRecursive4']


class UserIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class UserArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyUserArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ActivityTypeIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive1']


class ActivityTypeIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive2']


class ActivityTypeIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive3']


class ActivityTypeIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive4']


class ActivityTypeIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ActivityTypeArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class ActivityTypeArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class ActivityTypeArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class ActivityTypeArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class ActivityTypeArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyActivityTypeArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive1'


class FindManyActivityTypeArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive2'


class FindManyActivityTypeArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive3'


class FindManyActivityTypeArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    include: 'ActivityTypeIncludeFromActivityTypeRecursive4'


class FindManyActivityTypeArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityTypeOrderByInput', List['ActivityTypeOrderByInput']]
    where: 'ActivityTypeWhereInput'
    cursor: 'ActivityTypeWhereUniqueInput'
    distinct: List['ActivityTypeScalarFieldKeys']
    
    

class VCTypeIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive1']


class VCTypeIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive2']


class VCTypeIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive3']


class VCTypeIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive4']


class VCTypeIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class VCTypeArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class VCTypeArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class VCTypeArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class VCTypeArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class VCTypeArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyVCTypeArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive1'


class FindManyVCTypeArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive2'


class FindManyVCTypeArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive3'


class FindManyVCTypeArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    include: 'VCTypeIncludeFromVCTypeRecursive4'


class FindManyVCTypeArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['VCTypeOrderByInput', List['VCTypeOrderByInput']]
    where: 'VCTypeWhereInput'
    cursor: 'VCTypeWhereUniqueInput'
    distinct: List['VCTypeScalarFieldKeys']
    
    

class SessionIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive1']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive1']


class SessionIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive2']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive2']


class SessionIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive3']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive3']


class SessionIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive4']
    activityLogs: Union[bool, 'FindManyActivityLogArgsFromRoleRecursive4']


class SessionIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class SessionArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManySessionArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class ActivityLogIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive1']
    session: Union[bool, 'SessionArgsFromRoleRecursive1']
    ActivityType: Union[bool, 'ActivityTypeArgsFromRoleRecursive1']
    VCType: Union[bool, 'VCTypeArgsFromRoleRecursive1']


class ActivityLogIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive2']
    session: Union[bool, 'SessionArgsFromRoleRecursive2']
    ActivityType: Union[bool, 'ActivityTypeArgsFromRoleRecursive2']
    VCType: Union[bool, 'VCTypeArgsFromRoleRecursive2']


class ActivityLogIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive3']
    session: Union[bool, 'SessionArgsFromRoleRecursive3']
    ActivityType: Union[bool, 'ActivityTypeArgsFromRoleRecursive3']
    VCType: Union[bool, 'VCTypeArgsFromRoleRecursive3']


class ActivityLogIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive4']
    session: Union[bool, 'SessionArgsFromRoleRecursive4']
    ActivityType: Union[bool, 'ActivityTypeArgsFromRoleRecursive4']
    VCType: Union[bool, 'VCTypeArgsFromRoleRecursive4']


class ActivityLogIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class ActivityLogArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class ActivityLogArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class ActivityLogArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class ActivityLogArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class ActivityLogArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyActivityLogArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive1'


class FindManyActivityLogArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive2'


class FindManyActivityLogArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive3'


class FindManyActivityLogArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    include: 'ActivityLogIncludeFromActivityLogRecursive4'


class FindManyActivityLogArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['ActivityLogOrderByInput', List['ActivityLogOrderByInput']]
    where: 'ActivityLogWhereInput'
    cursor: 'ActivityLogWhereUniqueInput'
    distinct: List['ActivityLogScalarFieldKeys']
    
    

class UserLevelIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive1']


class UserLevelIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive2']


class UserLevelIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive3']


class UserLevelIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""
    user: Union[bool, 'UserArgsFromRoleRecursive4']


class UserLevelIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class UserLevelArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class UserLevelArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class UserLevelArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class UserLevelArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class UserLevelArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyUserLevelArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive1'


class FindManyUserLevelArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive2'


class FindManyUserLevelArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive3'


class FindManyUserLevelArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    include: 'UserLevelIncludeFromUserLevelRecursive4'


class FindManyUserLevelArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['UserLevelOrderByInput', List['UserLevelOrderByInput']]
    where: 'UserLevelWhereInput'
    cursor: 'UserLevelWhereUniqueInput'
    distinct: List['UserLevelScalarFieldKeys']
    
    

class RoleIncludeFromRole(TypedDict, total=False):
    """Relational arguments for Role"""


class RoleIncludeFromRoleRecursive1(TypedDict, total=False):
    """Relational arguments for Role"""


class RoleIncludeFromRoleRecursive2(TypedDict, total=False):
    """Relational arguments for Role"""


class RoleIncludeFromRoleRecursive3(TypedDict, total=False):
    """Relational arguments for Role"""


class RoleIncludeFromRoleRecursive4(TypedDict, total=False):
    """Relational arguments for Role"""

    

class RoleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive1'


class RoleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive2'


class RoleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive3'


class RoleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    include: 'RoleIncludeFromRoleRecursive4'


class RoleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    
    

class FindManyRoleArgsFromRole(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive1'


class FindManyRoleArgsFromRoleRecursive1(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive2'


class FindManyRoleArgsFromRoleRecursive2(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive3'


class FindManyRoleArgsFromRoleRecursive3(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    include: 'RoleIncludeFromRoleRecursive4'


class FindManyRoleArgsFromRoleRecursive4(TypedDict, total=False):
    """Arguments for Role"""
    take: int
    skip: int
    order_by: Union['RoleOrderByInput', List['RoleOrderByInput']]
    where: 'RoleWhereInput'
    cursor: 'RoleWhereUniqueInput'
    distinct: List['RoleScalarFieldKeys']
    


FindManyRoleArgs = FindManyRoleArgsFromRole
FindFirstRoleArgs = FindManyRoleArgsFromRole


    

class RoleWhereInput(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    minLevel: Union[_int, 'types.IntFilter']
    pillar: 'enums.Pillar'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive1', List['RoleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive1']
    OR: List['RoleWhereInputRecursive1']
    NOT: List['RoleWhereInputRecursive1']


class RoleWhereInputRecursive1(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    minLevel: Union[_int, 'types.IntFilter']
    pillar: 'enums.Pillar'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive2', List['RoleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive2']
    OR: List['RoleWhereInputRecursive2']
    NOT: List['RoleWhereInputRecursive2']


class RoleWhereInputRecursive2(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    minLevel: Union[_int, 'types.IntFilter']
    pillar: 'enums.Pillar'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive3', List['RoleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive3']
    OR: List['RoleWhereInputRecursive3']
    NOT: List['RoleWhereInputRecursive3']


class RoleWhereInputRecursive3(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    minLevel: Union[_int, 'types.IntFilter']
    pillar: 'enums.Pillar'

    # should be noted that AND and NOT should be Union['RoleWhereInputRecursive4', List['RoleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RoleWhereInputRecursive4']
    OR: List['RoleWhereInputRecursive4']
    NOT: List['RoleWhereInputRecursive4']


class RoleWhereInputRecursive4(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntFilter']
    name: Union[_str, 'types.StringFilter']
    minLevel: Union[_int, 'types.IntFilter']
    pillar: 'enums.Pillar'



# aggregate Role types


    

class RoleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    minLevel: Union[_int, 'types.IntWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['RoleScalarWhereWithAggregatesInputRecursive1']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive1']


class RoleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    minLevel: Union[_int, 'types.IntWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['RoleScalarWhereWithAggregatesInputRecursive2']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive2']


class RoleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    minLevel: Union[_int, 'types.IntWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['RoleScalarWhereWithAggregatesInputRecursive3']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive3']


class RoleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    minLevel: Union[_int, 'types.IntWithAggregatesFilter']
    pillar: 'enums.Pillar'

    AND: List['RoleScalarWhereWithAggregatesInputRecursive4']
    OR: List['RoleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RoleScalarWhereWithAggregatesInputRecursive4']


class RoleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Role arguments for searching"""
    id: Union[_int, 'types.BigIntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    minLevel: Union[_int, 'types.IntWithAggregatesFilter']
    pillar: 'enums.Pillar'



class RoleGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    minLevel: _int
    pillar: 'enums.Pillar'
    _sum: 'RoleSumAggregateOutput'
    _avg: 'RoleAvgAggregateOutput'
    _min: 'RoleMinAggregateOutput'
    _max: 'RoleMaxAggregateOutput'
    _count: 'RoleCountAggregateOutput'


class RoleAvgAggregateOutput(TypedDict, total=False):
    """Role output for aggregating averages"""
    id: float
    minLevel: float


class RoleSumAggregateOutput(TypedDict, total=False):
    """Role output for aggregating sums"""
    id: _int
    minLevel: _int


class RoleScalarAggregateOutput(TypedDict, total=False):
    """Role output including scalar fields"""
    id: _int
    name: _str
    minLevel: _int
    pillar: 'enums.Pillar'


RoleMinAggregateOutput = RoleScalarAggregateOutput
RoleMaxAggregateOutput = RoleScalarAggregateOutput


class RoleMaxAggregateInput(TypedDict, total=False):
    """Role input for aggregating by max"""
    id: bool
    name: bool
    minLevel: bool
    pillar: bool


class RoleMinAggregateInput(TypedDict, total=False):
    """Role input for aggregating by min"""
    id: bool
    name: bool
    minLevel: bool
    pillar: bool


class RoleNumberAggregateInput(TypedDict, total=False):
    """Role input for aggregating numbers"""
    id: bool
    minLevel: bool


RoleAvgAggregateInput = RoleNumberAggregateInput
RoleSumAggregateInput = RoleNumberAggregateInput


RoleCountAggregateInput = TypedDict(
    'RoleCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'minLevel': bool,
        'pillar': bool,
        '_all': bool,
    },
    total=False,
)

RoleCountAggregateOutput = TypedDict(
    'RoleCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'minLevel': int,
        'pillar': int,
        '_all': int,
    },
    total=False,
)


RoleKeys = Literal[
    'id',
    'name',
    'minLevel',
    'pillar',
]
RoleScalarFieldKeys = Literal[
    'id',
    'name',
    'minLevel',
    'pillar',
]
RoleScalarFieldKeysT = TypeVar('RoleScalarFieldKeysT', bound=RoleScalarFieldKeys)

RoleRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields